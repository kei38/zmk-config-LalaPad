#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// Sticky Key Configuration
&sk {
    release-after-ms = <5000>;  // 5秒間Altを保持
    quick-release;              // 他のキーを押したら即座に解除
};

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 2 1>;

    // was 3 2 (1.5x). Now 2/1 ≈ 2x for a slight speed increase.
    // <&zip_temp_layer MOUSE_R_LAYER 500>; automouse不要なのでコメントアウト

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>;

        // <&zip_temp_layer MOUSE_R_LAYER 500>; 不要なのでコメントアウト
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: sensor_scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
            label = "SCROLL_UP_DOWN";
        };

        scroll_down_up: sensor_scroll_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
            label = "SCROLL_DOWN_UP";
        };

        scroll_left_right: sensor_scroll_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
            label = "SCROLL_LEFT_RIGHT";
        };

        scroll_right_left: sensor_scroll_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
            label = "SCROLL_RIGHT_LEFT";
        };

        volume_up_down: sensor_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
            label = "VOLUME_UP_DOWN";
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_home: allow_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_HOME";
        };

        allow_end: allow_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_END";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        // Close quote with mod-morph for single/double quotes
        close_quote_morph: close_quote_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&close_single_quote>, <&close_double_quote>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "CLOSE_QUOTE_MORPH";
        };

        // Alt-Tab switcher with mod-morph
        // If Alt is already pressed (by sticky key), just send Tab
        // Otherwise, activate sticky Alt and send Tab
        alt_tab_morph: alt_tab_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk_alt_tab>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT)>;
            label = "ALT_TAB_MORPH";
        };

        // Alt-Shift-Tab switcher with mod-morph
        alt_shift_tab_morph: alt_shift_tab_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk_alt_shift_tab>, <&shift_tab>;
            mods = <(MOD_LALT|MOD_RALT)>;
            label = "ALT_SHIFT_TAB_MORPH";
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        // Single quote macro
        close_single_quote: close_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &kp SINGLE_QUOTE &kp SINGLE_QUOTE>,
                <&macro_tap &kp LEFT>;
            label = "CLOSE_SINGLE_QUOTE";
        };

        // Double quote macro with shift handling
        close_double_quote: close_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release &kp LSHFT &kp RSHFT>,
                <&macro_tap &kp LS(SINGLE_QUOTE) &kp LS(SINGLE_QUOTE)>,
                <&macro_pause_for_release>,
                <&macro_tap &kp LEFT>;
            label = "CLOSE_DOUBLE_QUOTE";
        };

        // Sticky Alt + Tab macro (first press only)
        sk_alt_tab: sk_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &sk LALT>,
                <&macro_tap &kp TAB>;
            label = "SK_ALT_TAB";
        };

        // Sticky Alt + Shift + Tab macro (first press only)
        sk_alt_shift_tab: sk_alt_shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &sk LALT>,
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp TAB>,
                <&macro_release &kp LSHFT>;
            label = "SK_ALT_SHIFT_TAB";
        };

        // Just Shift+Tab (when Alt is already active)
        shift_tab: shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp TAB>,
                <&macro_release &kp LSHFT>;
            label = "SHIFT_TAB";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&scroll_up_down>;

            bindings = <
&kp ESC    &kp Q     &kp W         &kp E        &kp R                   &kp T             &kp Y          &kp U          &kp I            &kp O         &kp P                    &mt GRAVE EQUAL
&kp LCTRL  &kp A     &kp S         &kp D        &kp F                   &kp G             &kp H          &kp J          &kp K            &kp L         &mt2 LEFT_BRACKET MINUS  &close_quote_morph
&kp LSHFT  &kp Z     &kp X         &kp C        &kp V                   &kp B             &kp N          &kp M          &kp COMMA        &kp PERIOD    &kp FSLH                 &kp BSLH
&mo 8      &kp LALT  &kp LEFT_GUI  &lt 2 TAB    &lt 1 SPACE             &mt2 LANG1 LANG2  &lt 3 SEMI     &kp BACKSPACE  &lt 1 ENTER      &kp LEFT_GUI  &mo 4                    &lt 4 DELETE
                     &alt_tab_morph   &kp LA(TAB)  &alt_shift_tab_morph    &kp LA(LS(TAB))   &allow_pageup  &allow_home    &allow_pagedown  &allow_end
            >;
        };

        SECONDARY_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&trans  &trans    &mkp MB4        &kp UP           &mkp MB5   &trans    &trans    &mkp MB4  &kp UP           &mkp MB5   &trans   &trans
&trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN         &kp RIGHT  &kp END   &kp HOME  &kp LEFT  &kp DOWN         &kp RIGHT  &kp END  &trans
&trans  &trans    &trans          &kp PRINTSCREEN  &trans     &trans    &trans    &mkp MB4  &kp PRINTSCREEN  &mkp MB5   &trans   &trans
&trans  &trans    &trans          &trans           &trans     &kp CAPS  &trans    &trans    &trans           &trans     &trans   &trans
                  &trans          &trans           &trans     &trans    &trans    &trans    &trans           &trans
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT  &kp POUND  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE
&trans     &kp N1           &kp N2  &kp N3     &kp N4      &kp N5       &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp DOT
&trans     &trans           &trans  &trans     &trans      &trans       &trans     &kp PLUS       &kp MINUS     &kp ASTRK             &kp FSLH               &trans
&trans     &trans           &trans  &trans     &trans      &trans       &trans     &trans         &kp EQUAL     &trans                &trans                 &trans
                            &trans  &trans     &trans      &trans       &trans     &trans         &trans        &trans
            >;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans       &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &bootloader  &bootloader   &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans        &trans        &trans        &bt BT_CLR    &trans        &bt BT_CLR_ALL
                &trans  &trans  &trans  &trans       &trans        &trans        &trans        &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &mkp MB3   &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp MB4   &mkp MB5   &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans              &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&mo SCROLL_L_LAYER  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans              &trans     &mkp MB5   &mkp MB4   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans              &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                               &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        FUNCTION_LAYER {
            bindings = <
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
&kp F11  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F12
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
